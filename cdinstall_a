#!/bin/sh

#************************************************************************************
#
#  Copyright Â© Aricent Holdings Luxembourg S.a.r.l. 2017, 2018, 2019  All rights reserved.
#
#************************************************************************************

# Licensed Materials - Property of IBM
#
# Connect:Direct(R) for UNIX
#
# (C) Copyright IBM Corp. 1992, 2016 All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp.

#================================================================
#
# Connect:Direct(R)
# COPYRIGHT (C) 1983, 2013  Sterling Commerce, Inc.
#
# This material is the confidential trade secret and proprietary
# information of Sterling Commerce, Inc. and/or its subsidiaries.
# It may not be reproduced, used, sold, or transferred to any
# third party without the prior written consent of Sterling
# Commerce, Inc.  All rights reserved.
#
# Use, duplication, or disclosure by the Government is subject
# to restrictions as set forth in subparagraph (c)(1)(ii) of
# the Rights in Technical Data and Computer Software clause at
# FAR 52.227-7013.
#
#                   Connect:Direct for UNIX
#
# Module function: Connect:Direct for UNIX installation script
#==============================================================
#<EOC_LABEL>


##############################################################################
# Constants
##############################################################################
DefaultOptionsFileName="options.txt"

PRODUCT_FULL_NAME="Connect:Direct"
PRODUCT_ABRV_NAME="CD"

##############################################################################
# Variables
##############################################################################
PATH=.:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/ucb:$PATH; export PATH
SYSTEM=
cdai_deployDir=`pwd`; export cdai_deployDir
LOGFILE=$cdai_deployDir/cdaiLog.txt
LOGFILEBN=`basename $LOGFILE`

PASSPHRASE="password"

cdai_optionsFile=""
CFSNAME=commonfunctions
IBMDIR=/opt/IBM
IBMCDDIR=$IBMDIR/ConnectDirect
IBMCDINSTALLDIR=$IBMCDDIR/cdunix
SNARSP=
IDINFOFILE=idInfoFile.txt
EXITSTATUSFILE=exitStatusFile.txt
INSTALL=install
UPGRADE=upgrade
UNINSTALL=uninstall

cdai_wrkIPAddress=

HLD_CMDLINE_ARGS="$@"
doingTEM=n


##############################################################################
# functions
##############################################################################

##############################################################################
# Initialize the environment.
init () #
{
    rm -rf $LOGFILE
    touch $LOGFILE
    chmod 666 $LOGFILE

    logDebug 0 "init() entered."

    TMPF=/dev/null

    log "0" "CDAI000I"

    logDebug 0 "setting umask to 22."
    umask 22

    if [ ! -d "tmp" ]; then
        mkdir tmp
    else
        rm -rf tmp/*
    fi

    setPlatformSpecifics

    # MFT-10047 - verify script is called by uid 0 (name is incidental)
    ROOTUSER=FALSE
    id | grep 'uid=0' > /dev/null 2>&1
    if [ $? -eq 0 ]
    then
	ROOTUSER=TRUE
    fi
    if [ "$ROOTUSER" = FALSE ]; then
        log "8" "CDAI012E"
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 12
    fi

    chkparms $@

    if [ "$cdai_installCmd" != "$UNINSTALL" -a "$cdai_installCmd" != "$UPGRADE"    ]; then
        getNetworkAddress $cdai_acquireHostnameOrIP
        cdai_listenAddress=$wrkIPAddress
        if [ "$cdai_listenAddress" = "0.0.0.0" -o "$cdai_listenAddress" = "::" -o "$cdai_listenAddress" = "0:0:0:0:0:0:0:0" ]; then
            getNetworkAddress "h"
            cdai_connectAddress=$wrkIPAddress
        else
            cdai_connectAddress=$cdai_listenAddress
        fi
    fi

    NDMAPICFG=$cdai_installDir/ndm/cfg/cliapi/ndmapi.cfg > /dev/null 2>&1; export NDMAPICFG > /dev/null 2>&1

    logDebug 0 "init() exited."
}

##############################################################################
# Set platform-specific options.
setPlatformSpecifics () #
{
    logDebug 0 "setPlatformSpecifics() entered."

    SYSTEM=`uname -s`

    case "$SYSTEM" in
        Linux)
            CPIOIARGS="-idmVu"
            CPIOOARGS="-odmVu"
            BUCPARGS="-RPfp"
            SNARSP=""
            ;;

        SunOS)
            if [ "`uname -p`" = "sparc" ]; then
                SUN_REL="`uname -r |awk '{S=substr($1,1,1)} {print S}'`"
                if [ "$SUN_REL" -gt 4 ]; then
                    SNARSP="n"
                else
                    SNARSP=""
                fi
            fi
            CPIOIARGS="-cidmuB"
            CPIOOARGS="-covB"
            BUCPARGS="-Rfp"
            ;;

        AIX)
            CPIOIARGS="-cidmuB"
            CPIOOARGS="-covB"
            SNARSP="n"
            BUCPARGS="-RPfp"
            ;;

        HP-UX)
            CPIOIARGS="-cidmuB"
            CPIOOARGS="-covB"
            BUCPARGS="-Rfp"
            archName=`uname -m`
            if [ "$archName" = "ia64" ]; then
                SNARSP=""
            else
                SNARSP="n"
            fi
            ;;

        *)
            CPIOIARGS="-cidmuB"
            CPIOOARGS="-covB"
            SNARSP=""
            BUCPARGS="-RPfp"
            ;;

    esac

    logDebug 0 "setPlatformSpecifics() exited."
}

##############################################################################
chkparms() #
{
    logDebug 0 "chkparms() entered."

    if [ "$1" = "-f" ]; then
        if [ "$2" = "" -o "`echo $2 | sed 's/^-.*//'`" = "" ]; then
            log "8" "CDAI003E"
            createExitStatusFile
            usage
            log "8" "CDAI001E"
            exitScript 3
        fi
        cdai_optionsFile="$2"
        if [ -f "$cdai_optionsFile" ]; then
            setOptsDefaultPath
            secChkOptionsFile
            chkDos2Unix $cdai_optionsFile
            . $cdai_optionsFile
            shift 2
            if [ $# -gt 0 ]; then
                processRemainingArgs $@
            fi
            chkOptions
            chkIfMoveToWritableDir
            removePassphrase
        else
            log "8" "CDAI004E"
            createExitStatusFile
            log "8" "CDAI001E"
            exitScript 4
        fi
    else
        if [ $# -le 0 ]; then
            log 8 CDAI033E
            createExitStatusFile
            log "8" "CDAI001E"
            exitScript 33
        fi
        if [ $# -lt 2 ]; then
            log "8" "CDAI002E" "argument: $1"
            createExitStatusFile
            log "8" "CDAI001E"
            exitScript 2
        fi
        processRemainingArgs $@
        chkOptions
        chkIfMoveToWritableDir
    fi

    setDefaultPath
    chkExistFiles

    logDebug 0 "chkparms() exited."
}

##############################################################################
# Verify required keystore password has been provided and meets min/max length
# requirements.
checkHasKeystorePass () #
{
    logDebug 0 "checkHasKeystorePass() entered."

    # MFT-10047 - A keystore password is not needed for an uninstall.  It may 
    # or may not be needed for an upgrade, let secure+_inst report if it's
    # missing when required.

    if [ X"$cdai_installCmd" = X"$INSTALL" -a -z "$cdai_keystorePassword" ]
    then
        log 8 CDAI050E "cdai_keystorePassword"
        createExitStatusFile
        log "8" "CDAI001E"
        logDebug 8 "checkHasKeystorePass() exited: FAIL"
        exitScript 50
    fi
    if [ -n "$cdai_keystorePassword" ]
    then
        export cdai_keystorePassword

            # Verify password is 3 to 80 chars
        keystorePassLen=`expr "$cdai_keystorePassword" : '.*'`

        if [ $keystorePassLen -lt  3 ]  ||
	    [ $keystorePassLen -gt 80 ]
	then
            log 8 CDAI027E " Keystore password must be between 3 and 80 characters."
            createExitStatusFile
            log "8" "CDAI001E"
            logDebug 8 "checkHasKeystorePass() exited: FAIL"
            exitScript 51
        fi
    fi

    logDebug 0 "checkHasKeystorePass() exited."
}

##############################################################################
# For security reasons, remove passphrase and keystore password from options
# file.
removePassphrase () #
{
    logDebug 0 "removePassphrase() entered."

    sed -e'/cdai_localCertPassphrase/d' < $cdai_optionsFile > _topts_.dat
    mv _topts_.dat $cdai_optionsFile

    sed -e'/cdai_keystorePassword/d'    < $cdai_optionsFile > _topts_.dat
    mv _topts_.dat $cdai_optionsFile

    chmod 666 $cdai_optionsFile
    chown $cdai_adminUserid $cdai_optionsFile
    export cdai_optionsFile

    logDebug 0 "removePassphrase() exited."
}

##############################################################################
# Make sure node name contains valid characters.
validateNodeName () #
{
    logDebug 0 "validateNodeName() entered. localNodeName=$cdai_localNodeName"

    vws=`echo "$cdai_localNodeName" | sed -n -e'/[^a-zA-Z0-9\._\-]/p'`
    if [ "$vws" != "" ]; then
        log 8 CDAI048E "\"$cdai_localNodeName\""
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 48
    fi

    logDebug 0 "validateNodeName() exited. localNodeName=$cdai_localNodeName"
}


##############################################################################
# Make sure node name is no longer than 16 characters.
setMaxNodeName () #
{
    logDebug 0 "setMaxNodeName() entered. localNodeName=$cdai_localNodeName"

    len=`echo $cdai_localNodeName | wc -c`
    # 17 because of linefeed.
    if [ "$len" -gt 17 ]; then
        len=`expr $len - 1`
        ws=`echo $cdai_localNodeName | cut -c1-8`
        elen=`expr $len - 7`
        cdai_localNodeName=${ws}`echo $cdai_localNodeName | cut -c$elen-$len`
    fi

    logDebug 0 "setMaxNodeName() exited. localNodeName=$cdai_localNodeName"
}

##############################################################################
# Validate parms from options file.
chkOptions () #
{
    logDebug 0 "chkOptions() entered."

    if [ "$cdai_trace" = "y" ]; then
        TMPF=$LOGFILE
    else
        TMPF=/dev/null
    fi

    if [ -d "$cdai_installDir/ndm/secure+" ]; then
        installSp=y
    else
        installSp=n
    fi

    if [ "$cdai_installCmd" != $INSTALL -a "$cdai_installCmd" != $UPGRADE -a "$cdai_installCmd" != "$UNINSTALL" ]; then
        log 8 CDAI027E " Parameter: cdai_installCmd=$cdai_installCmd"
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 27
    fi
    export cdai_installCmd

    # Make sure C:D already installed if doing upgrade or uninstall.
    if [ "$cdai_installCmd" = "$UNINSTALL" -o "$cdai_installCmd" = "$UPGRADE" ]; then
        chkIfInstalled
        if [ "$?" != "0" ]; then
            if [ "$cdai_installCmd" = "$UPGRADE" ]; then
                log 8 CDAI029E
                corc=29
            elif [ "$cdai_installCmd" = "$UNINSTALL" ]; then
                log 8 CDAI030E
                corc=30
            fi
            createExitStatusFile
            log "8" "CDAI001E"
            exitScript $corc
        fi
    fi

    # Process adminUserid.
    if [ "$cdai_installCmd" = "$UPGRADE" -o "$cdai_installCmd" = "$UNINSTALL" ]; then
        log 0 CDAI035I
        wau=""
        if [ -f $cdai_installDir/work/$IDINFOFILE ]; then
            wau=`sed -n -e's/ADMINUSERID=//p' < $cdai_installDir/work/$IDINFOFILE`
            if [ "$wau" != "" ]; then
                cdai_adminUserid="$wau"
                if [ "$cdai_adminUseridOverride" = "y" ]; then
                    log 0 CDAI037I
                fi
            else
                log 4 CDAI038E
            fi
        else
            log 4 CDAI037E
        fi
        if [ "$wau" = "" ]; then
            logDebug 0 "Extracting admin userid from install directory owner id."
            bn=`basename $cdai_installDir`
            dn=`dirname $cdai_installDir`
            cdai_adminUserid=`ls -l $dn | grep $bn | sed -e's/[ ][ ]*/ /g;q' | cut -d' ' -f3`
            logDebug 0 "install directory owner id: $cdai_adminUserid."
        fi
    fi

    if [ "$cdai_adminUserid" = "" ]; then
        log 8 CDAI013E "id: <not specified>"
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 13
    else
        wdt=`date "+%Y%m%d %H:%M:%S"`
        su $cdai_adminUserid -c "echo '$wdt     0 CDAI010I Testing admin id validity.'" >> $TMPF 2>&1
        if [ "$?" != "0" ]; then
            log 8 CDAI013E "id: $cdai_adminUserid"
            createExitStatusFile
            log "8" "CDAI001E"
            exitScript 13
        fi
        if [ "$cdai_installCmd" != "$INSTALL" ]; then
            touch $cdai_installDir/tid.txt > /dev/null 2>&1
            if [ "$?" != "0" ]; then
                log 8 CDAI013E "id: $cdai_adminUserid. Does not have write privileges to install directory."
                createExitStatusFile
                log "8" "CDAI001E"
                exitScript 13
            fi
        fi
    fi

    # Process localNodeName.
    if [ "$cdai_installCmd" = "install" ]; then
        if [ "$cdai_localNodeName" = "uname" ]; then
            cdai_localNodeName=`uname -n`
        elif [ "$cdai_localNodeName" = "" ]; then
            log 8 CDAI041E "local node name: $cdai_localNodeName"
            createExitStatusFile
            log "8" "CDAI001E"
            exitScript 41
        fi
        validateNodeName
        setMaxNodeName
    elif [ "$cdai_installCmd" = "upgrade" ]; then
        log 0 CDAI036I
        if [ -f $cdai_installDir/work/$IDINFOFILE ]; then
            wln=`sed -n -e's/LNOD=//p' < $cdai_installDir/work/$IDINFOFILE`
            if [ "$wln" != "" ]; then
                cdai_localNodeName="$wln"
                if [ "$cdai_localNodeNameOverride" = "y" ]; then
                    log 0 CDAI038I
                fi
            else
                log 4 CDAI040E
            fi
        else
            log 4 CDAI039E
        fi
        if [ "$cdai_localNodeName" = "uname" ]; then
            cdai_localNodeName=`uname -n`
        fi
        if [ "$cdai_localNodeName" = "" ]; then
            for file in `find $cdai_installDir/ndm/cfg -name initparm.cfg -print`;do
                Node_name_trim_front=`echo $file | sed 's/^.*\/ndm\/cfg\///'`
                cdai_localNodeName=`echo $Node_name_trim_front | sed 's/\/initparm.cfg$//'`
                break
            done
        fi
        if [ "$cdai_localNodeName" = "" ]; then
            log 8 CDAI041E "local node name: $cdai_localNodeName"
            createExitStatusFile
            log "8" "CDAI001E"
            exitScript 41
        fi
        setMaxNodeName
        if [ ! -d "$cdai_installDir/ndm/cfg/$cdai_localNodeName" ]; then
            log 8 CDAI042E "local node name: $cdai_localNodeName"
            createExitStatusFile
            log "8" "CDAI001E"
            exitScript 42
        fi
    fi

    checkHasKeystorePass

    if [ "$cdai_trace" = "y" ]; then
        displayOptionsVars
    fi

    if [ "$cdai_installCmd" = "$UNINSTALL" ]; then
        logDebug 0 "chkOptions() exited. Command is ${cdai_installCmd}."
        return 0
    fi

    logDebug 0 "chkOptions() exited."
    return 0
}


##############################################################################
# Move the deployment files if we can't write into the
# current deployment director when executing under the
# cdadmin userid. This is the case when invoked by TEM.
chkIfMoveToWritableDir () #
{
    logDebug 0 "chkIfMoveToWritableDir() entered."

    # Don't need to do this foran uninstall.
    if [ "$cdai_installCmd" = "$UNINSTALL" ]; then
        return 0
    fi

    hcwd=`pwd`
    if [ "$hcwd" = "$cdai_installDir/deployDir" ]; then
        return
    fi

    doingTEM=y

    logDebug 0 "Determining if need to create a deployment directory."
    su $cdai_adminUserid -c "touch tmp.tmp" > /dev/null 2>&1
    if [ -f tmp.tmp ]; then
        rm -f tmp.tmp
        logDebug 0 "No need to create a deployment directory."
        logDebug 0 "chkIfMoveToWritableDir() exited."
        return 0
    fi
    logDebug 0 "Will create a deployment directory."

    log 0 CDAI023I
    cd /tmp
#    su $cdai_adminUserid -c "mkdir -p $cdai_installDir/deployDir" > /dev/null 2>&1
    mkdir -p $cdai_installDir/deployDir > /dev/null 2>&1
    if [ "$?" != "0" ]; then
        log 8 CDAI035E "$cdai_installDir/deployDir"
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 35
    fi
    chown $cdai_adminUserid $cdai_installDir/deployDir
    chown $cdai_adminUserid $cdai_installDir

    cd $hcwd
    cp -rf $hcwd/* $cdai_installDir/deployDir > /dev/null 2>&1
    chmod 777 $cdai_installDir/deployDir/*
    log 0 CDAI024I

    log 0 CDAI025I
    cd $cdai_installDir/deployDir

    finalRc=`cdinstall_a "$HLD_CMDLINE_ARGS"; echo $?`
    wrc=`expr 0 + "$finalRc"`
    logDebug 0 "After cdinstall_a. finalRc=$finalRc, wrc=$wrc: $finalRc, $wrc"
    if [ "$wrc" = "" ]; then
        log 8 CDAI036E "cdinstall_a, exit code value: $finalRc"
        finalRc="36"
    fi

    cd $hcwd
    log 0 CDAI026I

    checkHasKeystorePass
    removePassphrase

    if [ -f "$cdai_installDir/deployDir/$EXITSTATUSFILE" ]; then
        cp -f $cdai_installDir/deployDir/$EXITSTATUSFILE .
    fi

    if [ "$cdai_installCmd" != "$UNINSTALL" ]; then
        if [ -f "$cdai_installDir/deployDir/$IDINFOFILE" ]; then
            cp -f $cdai_installDir/deployDir/$IDINFOFILE .
        fi
    fi

    log 0 CDAI027I

    echo '-------------------------------------------------------------------------' >> $LOGFILE
    log 0 CDAI028I
    cat $cdai_installDir/deployDir/$LOGFILEBN >> $LOGFILE

    secChkOptionsFile

    if [ "$cdai_installCmd" != "$UNINSTALL" ]; then
        copyOutputFiles
    fi

    logDebug 0 "chkIfMoveToWritableDir() exited. rc=$finalRc"
    exitScript $finalRc
}

##############################################################################
# Make sure files referenced in options file exist.
chkExistFiles () #
{
    logDebug 0 "chkExistFiles() entered."

    if [ "$cdai_installCmd" = "$UNINSTALL" ]; then
        logDebug 0 "chkExistFiles() exited. Command is ${UNINSTALL}."
        return
    fi

    if [ ! -f "$cdai_cpioFile" ]; then
        log 8 CDAI018E "$cdai_cpioFile"
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 18
    fi

    chkIfInstalled
    if [ "$?" != "0" ]; then
        hcwd=`pwd`
        ws=`dirname $hcwd`
        if [ "$ws" != "$cdai_installDir" ]; then
            if [ "$cdai_installCmd" != "$UNINSTALL" -a "$cdai_installCmd" != "$UPGRADE" -a "$cdai_ignoreExistingInstallDir" != "y" ]; then
                if [ -d "$cdai_installDir" -o -f "$cdai_installDir" ]; then
                    log 8 CDAI019E "$cdai_installDir"
                    createExitStatusFile
                    log "8" "CDAI001E"
                    exitScript 19
                fi

                su $cdai_adminUserid -c "mkdir $cdai_installDir" >> $TMPF 2>&1
                if [ "$?" != "0" ]; then
                    log 8 CDAI045E "dir: $cdai_installDir"
                    createExitStatusFile
                    log "8" "CDAI001E"
                    exitScript 45
                fi
                rmdir $cdai_installDir
            fi
        fi
    fi

    logDebug 0 "chkExistFiles() exited."
}

##############################################################################
# If full path not specified for directory variables
# set path to appropriate default.
setDefaultPath () #
{
    logDebug 0 "setDefaultPath() entered."

    if [ "$cdai_cpioFile" = "" ]; then
        cdai_cpioFile="$cdai_deployDir/cdunix"
    else
        dn=`dirname $cdai_cpioFile`
        if [ "$dn" = "" -o "$dn" = "." ]; then
            cdai_cpioFile="$cdai_deployDir/$cdai_cpioFile"
        fi
    fi

    if [ "$cdai_installDir" = "" ]; then
        cdai_installDir="$IBMCDINSTALLDIR"
    else
        dn=`dirname $cdai_installDir`
        if [ "$dn" = "" -o "$dn" = "." ]; then
            cdai_installDir="$IBMCDDIR/$cdai_installDir"
        fi
    fi

    if [ "$cdai_spConfig" != "" ]; then
        dn=`dirname $cdai_spConfig`
        if [ "$dn" = "" -o "$dn" = "." ]; then
            cdai_spConfig="$cdai_deployDir/$cdai_spConfig"
        fi
    fi

    if [ "$cdai_localCertFile" != "" ]; then
        dn=`dirname $cdai_localCertFile`
        if [ "$dn" = "" -o "$dn" = "." ]; then
            cdai_localCertFile="$cdai_deployDir/$cdai_localCertFile"
        fi
    fi

    if [ "$cdai_keystoreFile" != "" ]; then
	    dn=`dirname $cdai_keystoreFile`
	    if [ "$dn" = "" -o "$dn" = "." ]; then
	        cdai_keystoreFile="$cdai_deployDir/$cdai_keystoreFile"
 	    fi
    fi

    if [ "$cdai_asperaLicenseFile" != "" ]; then
	    dn=`dirname $cdai_asperaLicenseFile`
	    if [ "$dn" = "" -o "$dn" = "." ]; then
	        cdai_asperaLicenseFile="$cdai_deployDir/$cdai_asperaLicenseFile"
 	    fi
    fi

    logDebug 0 "setDefaultPath() exited."
}

##############################################################################
# If full path not specified for options file,
# set path to appropriate default.
setOptsDefaultPath () #
{
    logDebug 0 "setOptsDefaultPath() entered."

    if [ "$cdai_optionsFile" = "" ]; then
        cdai_optionsFile="$cdai_deployDir/$DefaultOptionsFileName"
    else
        dn=`dirname $cdai_optionsFile`
        if [ "$dn" = "" -o "$dn" = "." ]; then
            cdai_optionsFile="$cdai_deployDir/$cdai_optionsFile"
        fi
    fi

    logDebug 0 "setOptsDefaultPath() exited."
}

##############################################################################
# Make sure options file doesn't do a code injections.
secChkOptionsFile () #
{
    logDebug 0 "secChkOptionsFile() entered."

    rc=0

    if [ "$cdai_optionsFile" = "" ]; then
        return 0
    fi

    lctr=0
    for line in `cat $cdai_optionsFile | sed -e's/ /\%/g'`; do
        lctr=`expr $lctr + 1`
        echo "$line" | grep '^#' > /dev/null 2>&1
        scrc=$?
        logDebug 0 "options file line: $line"
        if [ "$scrc" = "0" ]; then
            continue
        fi
        line=`echo "$line" | sed -e's/\%/ /g'`
        echo $line | grep '`' > /dev/null 2>&1
        grc1=$?
        echo $line | grep '$(' > /dev/null 2>&1
        grc2=$?
        if [ $grc1 -eq 0 -o $grc2 -eq 0 ]; then
            log 8 CDAI011E "options file line: <L$lctr> $line"
            createExitStatusFile
            log "8" "CDAI001E"
            exitScript 11
        fi
        cmd=`echo "$line" | sed -n -e's/^\(cdai_.*\)=.*/\1/p'`
        logDebug 0 "options file cmd or var name: $cmd"
        case $cmd in
            -f)
                continue
                ;;

            cdai_installCmd)
                continue
                ;;

            cdai_cpioFile)
                continue
                ;;

            cdai_installDir)
                continue
                ;;

            cdai_ignoreExistingInstallDir)
                continue
                ;;

            cdai_allowUmaskReset)
                continue
                ;;

	    cdai_verifyUpgrade)
		continue
		;;

            cdai_localNodeName)
                continue
                ;;

            cdai_acquireHostnameOrIP)
                continue
                ;;

            cdai_serverPort)
                continue
                ;;

            cdai_clientPort)
                continue
                ;;

            cdai_rpcPort)
                continue
                ;;

            cdai_localCertFile)
                continue
                ;;

            cdai_localCertPassphrase)
                continue
                ;;

            cdai_localCertLabel)
                continue
                ;;

	    cdai_keystoreFile)
		continue
		;;

            cdai_keystorePassword)
                continue
                ;;

            cdai_adminUserid)
                continue
                ;;

            cdai_trace)
                ;;

            cdai_spConfig)
                continue
                ;;

            cdai_asperaLicenseFile)
                continue
                ;;

            *)
                log "8" "CDAI027E" "<L$lctr> $line"
                createExitStatusFile
                log "8" "CDAI001E"
                exitScript 27
                ;;
        esac
    done

    logDebug 0 "secChkOptionsFile() exited."

    return $rc
}

##############################################################################
# Make sure options file is in *NIX text format.
chkDos2Unix () #
{
    logDebug 0 "chkDos2Unix() entered."

    rc=0

    if [ "$1" = "" ]; then
        return 0
    fi

    od -x $1 | grep '0d' > /dev/null 2>&1
    if [ "$?" = "0" ]; then
        log "4" "CDAI043E" "$1"
    fi

    bn=`basename $1`
    cat "$1" | tr -d '\015' > tmp/$bn
    sedrc=$?
    chmod 666 $1
    mv tmp/$bn $1
    if [ "$?" != "0" -o "$sedrc" != "0" ]; then
        log "8" "CDAI044E" "$1"
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 44
    fi

    logDebug 0 "chkDos2Unix() exited."
}

##############################################################################
# Process cmd line args after -f
processRemainingArgs () #
{

    echo "$@" | grep '\-\-trace n' > /dev/null 2>&1
    if [ "$?" != "0" ]; then
        logDebug 0 "processRemainingArgs() entered."
    fi

    while [ $# -gt 0 ]; do
        case $1 in
            --installCmd)
                cdai_installCmd="$2"
                ;;

            --cpioFile)
                cdai_cpioFile="$2"
                ;;

            --installDir)
                cdai_installDir="$2"
                ;;

            --ignoreExistingInstallDir)
                cdai_ignoreExistingInstallDir="$2"
                ;;

            --allowUmaskReset)
                cdai_allowUmaskReset="$2"
                ;;

	    --verifyUpgrade)
		cdai_verifyUpgrade="$2"
		;;

            --localNodeName)
                cdai_localNodeName="$2"
                cdai_localNodeNameOverride=y
                ;;

            --acquireHostnameOrIP)
                cdai_acquireHostnameOrIP="$2"
                ;;


            --serverPort)
                cdai_serverPort="$2"
                ;;

            --clientPort)
                cdai_clientPort="$2"
                ;;

            --rpcPort)
                cdai_rpcPort="$2"
                ;;

            --localCertFile)
                cdai_localCertFile="$2"
                ;;

            --localCertPassphrase)
                cdai_localCertPassphrase="$2"
                ;;

            --localCertLabel)
                cdai_localCertLabel="$2"
                ;;

	    --keystoreFile)
		cdai_keystoreFile="$2"
		;;

            --keystorePassword)
                cdai_keystorePassword="$2"
                ;;

            --adminUserid)
                cdai_adminUserid="$2"
                cdai_adminUseridOverride=y
                ;;

            --trace)
                cdai_trace="$2"
                ;;

            --spConfig)
                cdai_spConfig="$2"
                ;;

            --asperaLicenseFile)
                cdai_asperaLicenseFile="$2"
                ;;

            *)
                log "8" "CDAI002E" "argument: $1"
                createExitStatusFile
                log "8" "CDAI001E"
                exitScript 2
                ;;
        esac
        shift 2
        if [ "$?" != "0" ]; then
            log "8" "CDAI002E" "Odd number of argument/value pairs specified on cmd line."
            createExitStatusFile
            log "8" "CDAI001E"
            exitScript 2
        fi
    done

    logDebug 0 "processRemainingArgs() exited."
}

##############################################################################
# Extract cdcust from cpio file.
getCdcust () #
{
    logDebug 0 "getCdcust() entered."

    cd tmp
    cpio $CPIOIARGS etc/cdcust < $cdai_cpioFile > /dev/null 2>&1
    mv etc/cdcust ..
    rm -rf etc
    cd ..
    chmod 755 cdcust

    logDebug 0 "getCdcust() exited."
}

##############################################################################
# Get the ipaddr, hostname, or FQDN if specified.
getNetworkAddress () #
{
    logDebug 0 "getNetworkAddress() entered. addressType=$1"

    getType=$1

    case $getType in
        h*)
            wrkIPAddress=`hostname | cut -d'.' -f1`
            ;;

        fqn*)
            wrkIPAddress=`nslookup \`hostname\` | sed -n 's/Name://p' | cut -c2-999`
            ;;

        ip4*)
            if [ "$SYSTEM" = "HP-UX" ]; then
                wrkIPAddress=`netstat -ain -f inet | sed -n 's/^lan[0-9]* * [0-9]* * [0-9]*\.[0-9]*\.[0-9]*\.[0-9]* * \([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\) .*/\1/p'`
            elif [ "$SYSTEM" = "AIX" ]; then
                wrkIPAddress=`ifconfig -a | grep 'inet ' | sed -n 's/^.*inet \([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\).*/\1/p;q'`
            elif [ "$SYSTEM" = "SunOS" ]; then
                wrkIPAddress=`ifconfig -a | sed -n -e'/^[^l ].*IPv4.*/{
                    n
                    p
                    }/' | sed -n -e's/.*inet.* \([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\).*netmask.*/\1/p;q'`
            else
                wrkIPAddress=`ifconfig -a | grep 'inet ' | sed -n 's/^.*[: ]\([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\).*\([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\).*\([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\)/\1/p;q'`
            fi
            ;;

        ip6*)
            if [ "$SYSTEM" = "HP-UX" ]; then
                wrkIPAddress=`netstat -ain -f inet6 | sed -n 's/^lan[0-9]* * [0-9]* * \(.*\)\/.*/\1/p'`
            elif [ "$SYSTEM" = "SunOS" ]; then
                wrkIPAddress=`ifconfig -a | sed -n -e'/^[^l ].*IPv6.*/{
                    n
                    p
                    }/' | sed -n -e's/.*inet6.* \(.*\)\/.*/\1/p;q'`
            else
                wrkIPAddress=`ifconfig -a | grep 'inet6 ' | sed -n 's/^.*[ ]\(.*\)\/.*/\1/p;q'`
                if [ "$wrkIPAddress" != "" ]; then
                    ws6=`echo $wrkIPAddress | sed -n -e'/^::1/p;q'`
                    if [ "$ws6" != "" ]; then
                        log 8 CDAI046E "address from ifconfig: $wrkIPAddress"
                        createExitStatusFile
                        log "8" "CDAI001E"
                        exitScript 46
                    fi
                fi
            fi
            ;;

        *)
            wrkIPAddress="$getType"
            ;;
    esac

    if [ "$wrkIPAddress" = "" ]; then
        log 8 CDAI031E "type: $cdai_acquireHostnameOrIP"
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 31
    fi

    logDebug 0 "getNetworkAddress() exited. wrkIPAddress=$wrkIPAddress"
}

##############################################################################
# Create and log messages. p1=error code, p2=msgid.
log () #
{
    dt=`date "+%Y%m%d %H:%M:%S"`
    msgt="${2}TXT"
    msgt=`eval echo \\${$msgt}`

    lrc=$1
    if [ "$lrc" -lt 10 ]; then
        lrc="    $lrc"
    elif [ "$lrc" -lt 100 ]; then
        lrc=" $lrc"
    fi
    lm="$dt $lrc $2 $msgt $3"
    echo "$lm" >> $LOGFILE

    cdai_exitStatusCode=$1
    cdai_exitMsgid=$2
    cdai_exitMsgt="$msgt ${3}${4}${5}${6}${7}${8}${9}"
}

# Info log messages."
##############################################################################
#............1234567890223456789032345678904234567890523456789062345678     907234567890....
CDAI000ITXT="$PRODUCT_FULL_NAME for UNIX automated installation started."
CDAI001ITXT="$PRODUCT_FULL_NAME automated installation completed."
#CDAI009ITXT="Setting umask to 22."
CDAI010ITXT="Debug message." # Actual msg text is argument 1.
CDAI011ITXT="Start of display of variables from options file."
CDAI012ITXT="End of display of variables from options file."
CDAI013ITXT="Backup of current installation started."
CDAI014ITXT="Backup of current installation completed."
CDAI015ITXT="Restore of current installation started."
CDAI016ITXT="Restore of current installation completed."
CDAI017ITXT="$PRODUCT_FULL_NAME successfully uninstalled."
CDAI018ITXT="Performing writable installation."
CDAI019ITXT="Performing upgrade installation."
CDAI020ITXT="Performing uninstall."
CDAI021ITXT="Configuring Secure+."
CDAI022ITXT="Verifying installation."
CDAI023ITXT="Copying deployment directory to writable directory."
CDAI024ITXT="Copying deployment directory complete."
CDAI025ITXT="Execution started in writable deployment directory."
CDAI026ITXT="Execution completed in writable deployment directory."
CDAI027ITXT="Copying output files from writable deployment directory."
CDAI028ITXT="Start of log records from writable deployment directory."
CDAI029ITXT="Building xlate tables started."
CDAI030ITXT="Building xlate tables completed."
CDAI031ITXT="Start of display of environment info."
CDAI032ITXT="End of display of environment info."
CDAI033ITXT="cdinstall_a exiting."
CDAI034ITXT="$PRODUCT_FULL_NAME for UNIX failed to start."
CDAI035ITXT="Extracting admin userid from idInfoFile."
CDAI036ITXT="Extracting local node name from idInfoFile."
CDAI037ITXT="Admin userid determined. Override ignored."
CDAI038ITXT="Local node determined. Override ignored."
CDAI039ITXT="Options File."
CDAI040ITXT="Resolved Variables."
CDAI041ITXT="Variables Used During:"
CDAI042ITXT="Copied configuration files. Verifying installation again."

# Error log messages.
CDAI000ETXT="usage:    cdinstall_a [-f <options file>] [cmd line args]"
CDAI001ETXT="$PRODUCT_FULL_NAME automated installation failed."
CDAI002ETXT="Invalid argument found."
CDAI003ETXT="Options file parameter not specified."
CDAI004ETXT="Options file does not exist."
CDAI005ETXT="Base installation and configuration failed."
CDAI006ETXT="Setting root attributes failed."
CDAI007ETXT="Secure+ configuration failed."
#CDAI008ETXT="Must not install under root id."
CDAI009ETXT="Backup of current installation failed."
CDAI010ETXT="Restore of current installation failed."
CDAI011ETXT="Executable code not allowed as value for variable."
CDAI012ETXT="cdinstall_a must run under root id."
CDAI013ETXT="Invalid admin userid."
CDAI014ETXT="Could not copy certificates to Secure+ directory."
CDAI015ETXT="Upgrade installation and configuration failed."
CDAI016ETXT="No keycert for S+ install."
CDAI017ETXT="Restore of installation directory failed."
CDAI018ETXT="File does not exist or is unreadable."
CDAI019ETXT="Install directory should not exist for new install."
CDAI020ETXT="Shutdown of $PRODUCT_FULL_NAME failed."
CDAI021ETXT="$PRODUCT_FULL_NAME not installed. Cannot uninstall."
CDAI022ETXT="$PRODUCT_FULL_NAME installation verification failed."
CDAI023ETXT="Error building xlate tables."
CDAI024ETXT="Copying log/output files to work subdirectory failed."
CDAI025ETXT="cdinstall_a exiting with error."
CDAI026ETXT="Deletion of $PRODUCT_ABRV_NAME installation directory failed."
CDAI027ETXT="Invalid parameter in options file or on command line."
CDAI028ETXT="Install cmd specified but $PRODUCT_ABRV_NAME already installed."
CDAI029ETXT="Upgrade cmd specified but $PRODUCT_ABRV_NAME is not installed."
CDAI030ETXT="Uninstall cmd specified but $PRODUCT_ABRV_NAME is not installed."
CDAI031ETXT="Acquiring net info failed. ip4|6: link addresses defined?"
CDAI032ETXT="Passphrase missing for keycert."
CDAI033ETXT="No cmd line arguments specified."
CDAI034ETXT="$PRODUCT_FULL_NAME for UNIX failed to start."
CDAI035ETXT="mkdir failed for directory: "
CDAI036ETXT="Invalid exit code returned. cmd="
CDAI037ETXT="idInfoFile.txt missing. setting cdadmin to dir owner id."
CDAI038ETXT="No cdadmin userid in id file. Trying alternate settings."
CDAI039ETXT="No local node name. Trying alternate settings."
CDAI040ETXT="No cdadmin userid.. Trying alternate settings."
CDAI041ETXT="Local node name not specified."
CDAI042ETXT="Invalid local node name specified."
CDAI043ETXT="Not a valid text file. Trying Win2unix conversion. File: "
CDAI044ETXT="Win2unix text conversion failed. File: "
CDAI045ETXT="cdadmin userid cannot read/write into install directory."
CDAI046ETXT="No usable IPv6 address configured."
CDAI047ETXT="Upgrade installation and configuration of Secure+ failed."
CDAI048ETXT="Invalid characters found in local node name."
CDAI049ETXT="$PRODUCT_ABRV_NAME config file copy to cfg/<nodename> directory failed."
CDAI050ETXT="Required parameter not provided: "  # MFT-10047 - added message for missing required parameter

##############################################################################
# Trace execution flow.
logDebug () #
{
    if [ "$cdai_trace" = "y" ]; then
        dt=`date "+%Y%m%d %H:%M:%S"`
        lrc=$1
        if [ "$lrc" -lt 10 ]; then
            lrc="    $lrc"
        elif [ "$lrc" -lt 100 ]; then
            lrc=" $lrc"
        fi
        lm="$dt $lrc CDAI010I $2 $3 $4 $5 $6 $7 $8 $9"
        echo "$lm" >> $LOGFILE
    fi
}

##############################################################################
# Display the values for the options variables set from the Options File.
displayOptionsVars () #
{
    logDebug 0 "displayOptionsVars() entered."

    log 0 CDAI011I

    log 0 CDAI039I
    if [ -f "$cdai_optionsFile" ]
    then
        cat $cdai_optionsFile | sed -e 's/\(cdai_localCertPassphrase=\).*/\1XXXXXXX/' \
                                    -e 's/\(cdai_keystorePassword=\).*/\1XXXXXXX/' >> $LOGFILE
    else
        echo "    No options file specified" >> $LOGFILE
    fi
    echo "" >> $LOGFILE

    log 0 CDAI040I
    if [ "$cdai_trace" != "" ]; then
        echo "    cdai_trace=$cdai_trace" >> $LOGFILE
    fi
    if [ "$cdai_installCmd" != "" ]; then
        echo "    cdai_installCmd=$cdai_installCmd" >> $LOGFILE
    fi
    if [ "$cdai_cpioFile" != "" ]; then
        echo "    cdai_cpioFile=$cdai_cpioFile" >> $LOGFILE
    fi
    if [ "$cdai_installDir" != "" ]; then
        echo "    cdai_installDir=$cdai_installDir" >> $LOGFILE
    fi
    if [ "$cdai_ignoreExistingInstallDir" != "" ]; then
        echo "    cdai_ignoreExistingInstallDir=$cdai_ignoreExistingInstallDir" >> $LOGFILE
    fi
    if [ "$cdai_allowUmaskReset" != "" ]; then
        echo "    cdai_allowUmaskReset=$cdai_allowUmaskReset" >> $LOGFILE
    fi
    if [ "$cdai_verifyUpgrade" != "" ]; then 
	echo "    cdai_verifyUpgrade=$cdai_verifyUpgrade" >> $LOGFILE
    fi
    if [ "$cdai_localNodeName" != "" ]; then
        echo "    cdai_localNodeName=$cdai_localNodeName" >> $LOGFILE
    fi
    if [ "$cdai_acquireHostnameOrIP" != "" ]; then
        echo "    cdai_acquireHostnameOrIP=$cdai_acquireHostnameOrIP" >> $LOGFILE
    fi
    if [ "$cdai_serverPort" != "" ]; then
        echo "    cdai_serverPort=$cdai_serverPort" >> $LOGFILE
    fi
    if [ "$cdai_clientPort" != "" ]; then
        echo "    cdai_clientPort=$cdai_clientPort" >> $LOGFILE
    fi
    if [ "$cdai_rpcPort" != "" ]; then
        echo "    cdai_rpcPort=$cdai_rpcPort" >> $LOGFILE
    fi
    if [ "$cdai_localCertFile" != "" ]; then
        echo "    cdai_localCertFile=$cdai_localCertFile" >> $LOGFILE
    fi
    if [ "$cdai_localCertPassphrase" != "" ]; then
        echo "    cdai_localCertPassphrase=XXXXXXX" >> $LOGFILE
    fi
    if [ "$cdai_localCertLabel" != "" ]; then
        echo "    cdai_localCertLabel=$cdai_localCertLabel" >> $LOGFILE
    fi
    if [ "$cdai_spConfig" != "" ]; then
        echo "    cdai_spConfig=$cdai_spConfig" >> $LOGFILE
    fi
    if [ "$cdai_adminUserid" != "" ]; then
        echo "    cdai_adminUserid=$cdai_adminUserid" >> $LOGFILE
    fi
    if [ "$cdai_keystoreFile" != "" ]; then 
	    echo "    cdai_keystoreFile=$cdai_keystoreFile" >> $LOGFILE
    fi
    if [ "$cdai_keystorePassword" != "" ]; then
        echo "    cdai_keystorePassword=XXXXXXXX" >> $LOGFILE
    fi
    if [ "$cdai_asperaLicenseFile" != "" ]; then
        echo "    cdai_asperaLicenseFile=$cdai_asperaLicenseFile" >> $LOGFILE
    fi
    echo "" >> $LOGFILE

    log 0 CDAI041I "$cdai_installCmd"
    if [ "$cdai_installCmd" = "$INSTALL" ]; then
        if [ "$cdai_trace" != "" ]; then
            echo "    cdai_trace=$cdai_trace" >> $LOGFILE
        fi
        echo "    cdai_installCmd=$cdai_installCmd" >> $LOGFILE
        echo "    cdai_cpioFile=$cdai_cpioFile" >> $LOGFILE
        echo "    cdai_installDir=$cdai_installDir" >> $LOGFILE
        echo "    cdai_localNodeName=$cdai_localNodeName" >> $LOGFILE
        echo "    cdai_acquireHostnameOrIP=$cdai_acquireHostnameOrIP" >> $LOGFILE
        echo "    cdai_serverPort=$cdai_serverPort" >> $LOGFILE
        echo "    cdai_clientPort=$cdai_clientPort" >> $LOGFILE
        if [ "$cdai_rpcPort" != "" ]; then
            echo "    cdai_rpcPort=$cdai_rpcPort" >> $LOGFILE
        fi
        echo "    cdai_localCertFile=$cdai_localCertFile" >> $LOGFILE
        if [ "$cdai_localCertPassphrase" != "" ]; then
            echo "    cdai_localCertPassphrase=XXXXXXX" >> $LOGFILE
        fi
        if [ "$cdai_localCertLabel" != "" ]; then
            echo "    cdai_localCertLabel=$cdai_localCertLabel" >> $LOGFILE
        fi
        if [ "$cdai_spConfig" != "" ]; then
            echo "    cdai_spConfig=$cdai_spConfig" >> $LOGFILE
        fi
        echo "    cdai_adminUserid=$cdai_adminUserid" >> $LOGFILE
	    echo "    cdai_keystoreFile=$cdai_keystoreFile" >> $LOGFILE
        if [ "$cdai_keystorePassword" != "" ]; then
            echo "    cdai_keystorePassword=XXXXXXX" >> $LOGFILE
        fi
    elif [ "$cdai_installCmd" = "$UPGRADE" ]; then
        if [ "$cdai_trace" != "" ]; then
            echo "    cdai_trace=$cdai_trace" >> $LOGFILE
        fi
        echo "    cdai_installCmd=$cdai_installCmd" >> $LOGFILE
        echo "    cdai_cpioFile=$cdai_cpioFile" >> $LOGFILE
        echo "    cdai_installDir=$cdai_installDir" >> $LOGFILE
        echo "    cdai_asperaLicenseFile=$cdai_asperaLicenseFile" >> $LOGFILE
        if [ "$cdai_localNodeName" != "" ]; then
            echo "    cdai_localNodeName=$cdai_localNodeName" >> $LOGFILE
        fi
        if [ "$cdai_adminUserid" != "" ]; then
            echo "    cdai_adminUserid=$cdai_adminUserid" >> $LOGFILE
        fi
    elif [ "$cdai_installCmd" = "$UNINSTALL" ]; then
        if [ "$cdai_trace" != "" ]; then
            echo "    cdai_trace=$cdai_trace" >> $LOGFILE
        fi
        echo "    cdai_installCmd=$cdai_installCmd" >> $LOGFILE
        echo "    cdai_installDir=$cdai_installDir" >> $LOGFILE
    fi

    log 0 CDAI012I

    logDebug 0 "displayOptionsVars() exited."
}

##############################################################################
usage () #
{
    log 8 CDAI000E
}


##############################################################################
# Do base C:D istallation and config.
baseInstallConfigure () #
{
    logDebug 0 "baseInstallConfigure() entered."

    getBaseResponses

    cat basersps.txt | su $cdai_adminUserid -c `pwd`/cdinstall >> $TMPF 2>&1
    if [ "$?" != "0" ]; then
        log "8" "CDAI005E"
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 5
    fi

    grpid=`su $cdai_adminUserid -c "id | sed -e's/uid.*gid=\([0-9][0-9]*\).*/\1/'"`
    chgrp $grpid $cdai_installDir

    logDebug 0 "baseInstallConfigure() exited."
    return 0
}

getBaseResponses () #
{
    logDebug 0 "getBaseResponses() entered."

    if [ -f basersps.txt ]; then
        rm basersps.txt
    fi

    UMASKOUT=`su $cdai_adminUserid -c umask | awk ' { printf("%d", int($1)) } '`
    if [ $UMASKOUT -ne 0 -a $UMASKOUT -ne 2 -a $UMASKOUT -ne 22 ]; then
        if [ "$cdai_allowUmaskReset" = "n" ]; then
            echo n >> basersps.txt
        else
            echo y >> basersps.txt
        fi
    fi

cat << EOD >> basersps.txt
enter
$cdai_installDir
y
1
$cdai_cpioFile
y
enter
3
$cdai_localNodeName
EOD

if [ "$SNARSP" != "" ]; then
    echo $SNARSP >> basersps.txt
fi

cat << EOD >> basersps.txt
$cdai_serverPort
$cdai_listenAddress
$cdai_clientPort
$cdai_connectAddress
EOD

if [ "$SYSTEM" = "SunOS" -o "$SYSTEM" = "HP-UX" ]; then
    if [ "$cdai_rpcPort" = "" ]; then
        echo 1367 >> basersps.txt
    else
        echo $cdai_rpcPort >> basersps.txt
    fi
fi

cat << EOD >> basersps.txt
enter
y
$cdai_adminUserid
$cdai_localNodeName
$cdai_adminUserid
n
y
$cdai_adminUserid
y
n
enter
$cdai_clientPort
$cdai_connectAddress
5
y
5
y
enter
y
$cdai_localNodeName
$PASSPHRASE
n
EOD

    logDebug 0 "getBaseResponses() exited."
}

##############################################################################
# Set uid, group, and userid for executables. Set SACL directory attributes.
doRootProcessing () #
{
    logDebug 0 "doRootProcessing() entered."

    $cdai_installDir/etc/cdcust >> $TMPF 2>&1 << EOD
$cdai_installDir
enter
4
enter
y
y
5
EOD

    if [ "$?" != "0" ]; then
        log "8" "CDAI006E"
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 6
    fi

    logDebug 0 "doRootProcessing() exited."
}

##############################################################################
# Set uid, group, and userid for executables. Set SACL directory attributes.
doUpgradeRootProcessing () #
{
    logDebug 0 "doUpgradeRootProcessing() entered."

    getUpgradeRootResponses
    cat doupgraderootrsps.txt | $cdai_installDir/etc/cdcust >> $TMPF 2>&1
    if [ "$?" != "0" ]; then
        log "8" "CDAI006E"
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 6
    fi

    logDebug 0 "doUpgradeRootProcessing() exited."
}

##############################################################################
# Create responses for upgrade Root processing.
getUpgradeRootResponses () #
{
    logDebug 0 "getUpgradeRootResponses() entered."

    cat << EOD > doupgraderootrsps.txt
$cdai_installDir
enter
4
enter
y
EOD

if [ -f "$cdai_installDir/ndm/SACL/sysacl.cfg" ]; then
    size=`wc -c $cdai_installDir/ndm/SACL/sysacl.cfg | awk '{ print $1 } '`
    if [ $size -ge 3 ];then
        echo "n" >> doupgraderootrsps.txt
    fi
fi

    cat << EOD >> doupgraderootrsps.txt
y
5
enter
n
n
n
EOD

    logDebug 0 "getUpgradeRootResponses() exited."
}


##############################################################################
# Configure Secure+
configSp () #
{
    logDebug 0 "configSp() entered."

    if [ -n "$cdai_keystoreFile" -a -f "$cdai_keystoreFile" ]
    then
	su $cdai_adminUserid -c "cp -f $cdai_keystoreFile $cdai_installDir/ndm/secure+/certificates" > /dev/null 2>&1
    fi

    SPCLIRC=8
    if [ "$cdai_spConfig" != "" ]
    then
        if [ "$cdai_trace" = "y" ]
	then
            su $cdai_adminUserid -c $cdai_installDir/ndm/bin/spcli.sh < $cdai_spConfig >> $LOGFILE 2>&1
        else
            su $cdai_adminUserid -c $cdai_installDir/ndm/bin/spcli.sh < $cdai_spConfig > /dev/null 2>&1
        fi
	SPCLIRC=$?
    else
	configSpBasic
	if [ "$cdai_trace" = "y" ]
	then
	    su $cdai_adminUserid -c $cdai_installDir/ndm/bin/spcli.sh < tmp/spcmds.txt >> $LOGFILE 2>&1
	else
	    su $cdai_adminUserid -c $cdai_installDir/ndm/bin/spcli.sh < tmp/spcmds.txt > /dev/null 2>&1
	fi
	SPCLIRC=$?
	sed "s/$cdai_localCertPassphrase/x/" < tmp/spcmds.txt > _scrub_.dat
	mv _scrub_.dat tmp/spcmds.txt
	sed "s/$cdai_keystorePassword/x/" < tmp/spcmds.txt > _scrub_.dat
	mv _scrub_.dat tmp/spcmds.txt
    fi

    if [ "$SPCLIRC" -gt "4" ]
    then
        log "8" "CDAI007E"
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 7
    fi

    logDebug 0 "configSp() exited."
}

#
# Only do basic S+ configuration since no
# spcmds file was specified.
configSpBasic() 
{
    logDebug 0 "configSpBasic() entered."

    rm -f tmp/spcmds.txt
    touch tmp/spcmds.txt
    if [ -n "$cdai_keystoreFile" ]
    then
	keystoreBasename=`basename $cdai_keystoreFile`
	if [ "$keystoreBasename" = "" ]
	then
	    log 8 CDAI008E
	    createExitStatusFile
	    log "8" "CDAI001E"
	    exitScript 16
	fi
	cat << EOD >> tmp/spcmds.txt
update keystore
   file=$cdai_installDir/ndm/secure+/certificates/$keystoreBasename
   passphrase=$cdai_keystorePassword;

EOD
    fi
    CERTCOUNT=1
    for cert in `ls $cdai_deployDir/*.pem $cdai_deployDir/*.crt $cdai_deployDir/*.cer 2> /dev/null `
    do
	sed -n '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/p;' < $cert > $cdai_deployDir/tmp/cert$CERTCOUNT.txt
	cat << EOD >> tmp/spcmds.txt
import trustedcert 
   file=$cdai_deployDir/tmp/cert$CERTCOUNT.txt;

EOD
	CERTCOUNT=`expr $CERTCOUNT + 1`
    done

    if [ -z "$cdai_localCertLabel" ]
    then
	cdai_localCertLabel=Client-API
    fi
    cat << EOD >> tmp/spcmds.txt
import keycert
   file=$cdai_localCertFile
   label=$cdai_localCertLabel
   passphrase=$cdai_localCertPassphrase;

update localnode
   override=n
   protocol=tls
   keycertlabel=$cdai_localCertLabel
   ciphersuites=all;

update client
   override=y
   protocol=tls
   keycertlabel=$cdai_localCertLabel
   ciphersuites=all;

validate parmfile;
quit;
EOD

    logDebug 0 "configSpBasic() exited."
}

##############################################################################
# Do upgrade C:D istallation and config.
upgradeInstall () #
{
    logDebug 0 "upgradeInstall() entered."

    cdai_upgrade="y"; export cdai_upgrade

    shutdownCd
    backupCd

    getUpgradeResponses
    rm -rf $cdai_installDir/ndm/lib/* > /dev/null 2>&1 # Avoids a Secure+ missing symbol error if remove first.
    wdir=`pwd`
    cat upgradersps.txt | su $cdai_adminUserid -c $wdir/cdinstall >> $TMPF 2>&1
    cdinstallRC=$?  # MFT-10047 - capture cdinstall RC for  error handling
    if [ "$cdinstallRC" != "0" ]
    then
	if [ "$cdinstallRC" = "16" ]
	then
            log 8 CDAI050E "cdai_keystorePassword"
	    exitScriptCode=50
	else
            log "8" "CDAI015E"
	    exitScriptCode=15
	fi
        createExitStatusFile
        restoreCd
        log "8" "CDAI001E"
        exitScript $exitScriptCode
    fi

    logDebug 0 "upgradeInstall() exited."

    return 0
}

##############################################################################
# Create response file for upgrade operation.
getUpgradeResponses () #
{
    logDebug 0 "getUpgradeResponses() entered."

rm upgradersps.txt
UMASKOUT=`su $cdai_adminUserid -c umask | awk ' { printf("%d", int($1)) } '`
if [ $UMASKOUT -ne 0 -a $UMASKOUT -ne 2 -a $UMASKOUT -ne 22 ]; then
     if [ "$cdai_allowUmaskReset" = "n" ]; then
            echo n >> upgradersps.txt
     else
            echo y >> upgradersps.txt
     fi
fi

cat << EOD >> upgradersps.txt
enter
$cdai_installDir
y
1
$cdai_cpioFile
y
enter
3
$cdai_localNodeName
n
n
enter
n
n
enter
n
n
5
y
y
EOD

    getUpgradeSpResponses

    logDebug 0 "getUpgradeResponses() exited."
}

##############################################################################
# Upgrade S+ if already installed.
getUpgradeSpResponses () #
{
    if [ "$installSp" = "y" ]
    then
	echo "5" >> upgradersps.txt
	echo "y" >> upgradersps.txt
	echo "enter" >> upgradersps.txt
	echo "y" >> upgradersps.txt
	echo "n" >> upgradersps.txt

	if [ -f $cdai_installDir/ndm/secure+/nodes/.cdspacf -a -s $cdai_installDir/ndm/secure+/nodes/.cdspacf ]
	then
            echo "$cdai_localNodeName" >> upgradersps.txt
            echo "$PASSPHRASE" >> upgradersps.txt
	fi

	echo "n" >> upgradersps.txt
    else
	echo "6" >> upgradersps.txt
    fi

#cat << EOD >> upgradersps.txt
#$cdai_localNodeName
#$PASSPHRASE
#n
#6
#EOD

    logDebug 0 "getUpgradeSpResponses() exited."
}

##############################################################################
# Verify installation
verifyInstallation () #
{
    logDebug 0 "verifyInstallation() entered."

    log 0 CDAI022I

    if [ "$cdai_trace" = "y" ]; then
        wout=$LOGFILE
    else
        wout=/dev/null
    fi

    hcwd=`pwd`
    cd $cdai_installDir/ndm/bin
    #cfgcheck >> $wout 2>&1
    su $cdai_adminUserid -c "$cdai_installDir/ndm/bin/cfgcheck" >> $wout 2>&1
    rc=$?
    cd $hcwd
    if [ "$rc" != "0" ]; then
        log 8 CDAI022E "Task is cfgcheck."
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 22
    fi

    startupCd
    if [ "$?" != "0" ]; then
        log 8 CDAI034E
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 34
    fi

    # Delay two seconds so subsequent sel stats won't find XRRF011I TCQ not there with ccod=8;
    sleep 5
    time=`date "+%H:%M:%S"`
    date=`date "+%m/%d/%Y"`

    echo "submit file=$cdai_installDir/ndm/bin/sample.cd;" | su $cdai_adminUserid -c "NDMAPICFG=$cdai_installDir/ndm/cfg/cliapi/ndmapi.cfg; export NDMAPICFG; $cdai_installDir/ndm/bin/direct -x" >> $wout 2>&1
    if [ "$?" != "0" ]; then
        log 8 CDAI022E "Task is submit sample process."
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 22
    fi

    sleep 3
    #
    # First sel stat is for log.
    # Second is to check for errors.
    echo "sel stat ccode=(gt,4) startt=($date,$time);" | su $cdai_adminUserid -c "NDMAPICFG=$cdai_installDir/ndm/cfg/cliapi/ndmapi.cfg; export NDMAPICFG; $cdai_installDir/ndm/bin/direct -x" >> $wout 2>&1
    echo "sel stat ccode=(gt,4) startt=($date,$time);" | su $cdai_adminUserid -c "NDMAPICFG=$cdai_installDir/ndm/cfg/cliapi/ndmapi.cfg; export NDMAPICFG; $cdai_installDir/ndm/bin/direct -x" >    tmp/stats.out 2>&1
    ws=`grep 'CCOD' tmp/stats.out`
    if [ "$ws" != "" ]; then
        log 8 CDAI022E "Task is select statistics for sample process."
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 22
    fi

    logDebug 0 "verifyInstallation() exited."
}

##############################################################################
# Back up current CDU installation.
backupCd () #
{
    logDebug 0 "backupCd() entered."

    log 0 CDAI013I

    rm -rf $cdai_installDir/restore
    mkdir -p $cdai_installDir/restore

    for dirname in `ls $cdai_installDir`; do
        if [ "$dirname" != "restore" -a "$dirname" != "deployDir" ]; then
            if [ "$cdai_trace" = "y" ]; then
                logDebug 0 "backupCd: dirname=$dirname"
                cp $BUCPARGS $cdai_installDir/$dirname $cdai_installDir/restore >> $LOGFILE 2>&1
            else
                cp $BUCPARGS $cdai_installDir/$dirname $cdai_installDir/restore >    /dev/null 2>&1
            fi
            if [ $? != 0 ]; then
                log 8 CDAI009E
                createExitStatusFile
                log "8" "CDAI001E"
                exitScript 9
            fi
        fi
    done

    log 0 CDAI014I

    logDebug 0 "backupCd() exited."
}

##############################################################################
# Restore previous CDU installation directory contents.
restoreCd () #
{
    logDebug 0 "restoreCd() entered."

    for dirname in `ls $cdai_installDir`; do
        if [ "$dirname" != "restore" -a "$dirname" != "deployDir" ]; then
            if [ "$cdai_trace" = "y" ]; then
                logDebug 0 "restoreCd: dirname=$dirname"
                rm -rf $cdai_installDir/$dirname >> $LOGFILE 2>&1
            else
                rm -rf $cdai_installDir/$dirname >    /dev/null 2>&1
            fi
            if [ $? != 0 ]; then
                log 8 CDAI010E "directory=$dirname."
                createExitStatusFile
                log "8" "CDAI001E"
                exitScript 9
            fi
        fi
    done

    if [ "$cdai_trace" = "y" ]; then
        cp -Rfp $cdai_installDir/restore/* $cdai_installDir >> $LOGFILE 2>&1
    else
        cp -Rfp $cdai_installDir/restore/* $cdai_installDir >    /dev/null 2>&1
    fi

    if [ $? != 0 ]; then
        log 8 CDAI017E
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 17
    fi

    rm -rf $cdai_installDir/restore
    if [ $? != 0 ]; then
        log 8 CDAI012E "remove of restore directory contents failed."
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 12
    fi
    # Start up CD if restore is successful
    startupCd
    logDebug 0 "restoreCd() exited."
}

##############################################################################
# Determine if C:D is already installed.
chkIfInstalled () #
{
    logDebug 0 "chkIfInstalled() entered."

    rc=1

    if [ -d "$cdai_installDir" -a -f "$cdai_installDir/ndm/bin/cdpmgr" ]; then
        rc=0
    fi

    logDebug 0 "chkIfInstalled() exited. rc=$rc"
    return $rc
}

##############################################################################
# Start up CD
startupCd () #
{
    logDebug 0 "startupCd() entered."

    if [ "$cdai_trace" = "y" ]; then
        wout="$LOGFILE"
    else
        wout="/dev/null"
    fi

    hcwd=`pwd`
    cd $cdai_installDir
    su $cdai_adminUserid -c "$cdai_installDir/ndm/bin/cdpmgr -i $cdai_installDir/ndm/cfg/$cdai_localNodeName/initparm.cfg" >> $wout 2>&1
    rc=$?
    cd $hcwd
    if [ "$rc" != "0" ]; then
        logDebug 0 "startupCd() exited. rc=$rc after invoking cdpmgr."
        return $rc
    fi

    testConnection
    rc=$?

    logDebug 0 "startupCd() exited. rc=$rc"
    return $rc
}

##############################################################################
# Shutdown CD if running.
shutdownCd () #
{
    logDebug 0 "shutdownCd() entered."

    if [ "$cdai_trace" = "y" ]; then
        wout="$LOGFILE"
    else
        wout="/dev/null"
    fi

    testConnection
    rc=$?
    if [ "$rc" = "1" ]; then
        return 0
    fi
    if [ $rc != 0 ]; then
        log 8 CDAI020E "$tcws"
        createExitStatusFile
        log "8" "CDAI001E"
        exit 20
    fi

    logDebug 0 "$PRODUCT_FULL_NAME is up. Issuing stop command."
    echo "stop;" | su $cdai_adminUserid -c "NDMAPICFG=$cdai_installDir/ndm/cfg/cliapi/ndmapi.cfg; export NDMAPICFG; $cdai_installDir/ndm/bin/direct -x" >> $wout 2>&1
    rc=$?
    if [ $rc != 0 ]; then
        log 8 CDAI020E "stop command issued."
        createExitStatusFile
        log "8" "CDAI001E"
        exit 20
    fi

    logDebug 0 "Stop command complete. rc=$rc"

    if [ "$SYSTEM" = "SunOS" ]; then
        while :
        do
            netstat -an | grep "\.$cdai_clientPort " >> $LOGFILE
            if [ $? -eq 1 ]
            then
                break
            else
                sleep 7
            fi
        done
    else
        sleep 7
    fi

    logDebug 0 "shutdownCd() exited. rc=$rc"
    return $rc
}

##############################################################################
# Test the connection to C:D.
testConnection () #
{
    logDebug 0 "Testing connection to $PRODUCT_FULL_NAME."

    echo "quit;" | su $cdai_adminUserid -c "NDMAPICFG=$cdai_installDir/ndm/cfg/cliapi/ndmapi.cfg; export NDMAPICFG; $cdai_installDir/ndm/bin/direct -x" > tmp/shutdown.out 2>&1
    logDebug 0 "Connection attempted."

    if [ "$cdai_trace" = "y" ]; then
        cat tmp/shutdown.out >> $LOGFILE
    fi

    grep XIPT003I tmp/shutdown.out > /dev/null 2>&1
    rc=$?
    if [ $rc = 0 ]; then
        logDebug 0 "$PRODUCT_FULL_NAME is not up."
        logDebug 0 "testConnection() exited. rc=1"
        return 1
    fi

    tcws=`grep '^X' tmp/shutdown.out`
    rc=$?
    if [ $rc = 1 ]; then
        rc=0
    fi

    logDebug 0 "testConnection() exited. rc=$rc"
    return $rc
}

##############################################################################
# Create the Id file that give information about
# this installation of C:D UNIX.
createIdInfoFile () #
{

    logDebug 0 "createIdInfoFile() entered."

    rm -f $cdai_deployDir/$IDINFOFILE
    touch $cdai_deployDir/$IDINFOFILE

    dt=`date "+%Y%m%d    %H:%M:%S"`
    echo "DTIM=$dt" >> $cdai_deployDir/$IDINFOFILE

    vrm=`$cdai_installDir/etc/cdver | sed 's/.*\([0-9]\.[0-9]\.[0-9]\.[0-9]\).*/\1/'`
    echo "VRM=$vrm" >> $cdai_deployDir/$IDINFOFILE

    echo "LNOD=$cdai_localNodeName" >> $cdai_deployDir/$IDINFOFILE
    echo "IDIR=$cdai_installDir" >> $cdai_deployDir/$IDINFOFILE

    tcpapi=`cat $cdai_installDir/ndm/cfg/$cdai_localNodeName/netmap.cfg | grep ':tcp.api='`
    apiaddr=`echo $tcpapi | sed -e's/.*=\(.*\);.*/\1/'` >> $TMPF 2>&1
    apiport=`echo $tcpapi | sed -e's/.*;\(.*\):.*/\1/'` >> $TMPF 2>&1

    echo "IPAD=$apiaddr" >> $cdai_deployDir/$IDINFOFILE
    echo "PORT=$apiport" >> $cdai_deployDir/$IDINFOFILE

    echo "ADMINUSERID=$cdai_adminUserid" >> $cdai_deployDir/$IDINFOFILE

    chmod 444 $cdai_deployDir/$IDINFOFILE

    logDebug 0 "createIdInfoFile() exited."
}

##############################################################################
# Create the Id file that gives information about
# this installation of C:D UNIX.
createExitStatusFile () #
{

    logDebug 0 "createExitStatusFile() entered."

    rm -f $cdai_deployDir/$EXITSTATUSFILE
    touch $cdai_deployDir/$EXITSTATUSFILE

    dt=`date "+%Y%m%d    %H:%M:%S"`
    echo "DTIM=$dt" >> $cdai_deployDir/$EXITSTATUSFILE

    echo "RC=$cdai_exitStatusCode" >> $cdai_deployDir/$EXITSTATUSFILE
    echo "MSGID=$cdai_exitMsgid"     >> $cdai_deployDir/$EXITSTATUSFILE
    echo "MSGT=$cdai_exitMsgt"         >> $cdai_deployDir/$EXITSTATUSFILE

    logDebug 0 "createExitStatusFile() exited."
}

##############################################################################
# Copy output files to work directory for later reference.
copyOutputFiles () #
{

    logDebug 0 "copyOutputFiles() entered."

    rc=0
    if [ -f "$LOGFILE" -a -d "$cdai_installDir/work" ]; then
        cp -f $LOGFILE $cdai_installDir/work
        if [ "$?" != "0" ]; then
            rc=$?
            log 4 CDAI024E "$LOGFILE"
        fi
    fi

    if [ -f "$cdai_deployDir/$IDINFOFILE" -a -d "$cdai_installDir/work"    ]; then
        cp -f $cdai_deployDir/$IDINFOFILE $cdai_installDir/work
        if [ "$?" != "0" ]; then
            rc=$?
            log 4 CDAI024E "$IDINFOFILE"
        fi
    fi

    if [ -f "$cdai_deployDir/$EXITSTATUSFILE" -a -d "$cdai_installDir/work"    ]; then
        cp -f $cdai_deployDir/$EXITSTATUSFILE    $cdai_installDir/work
        if [ "$?" != "0" ]; then
            rc=$?
            log 4 CDAI024E "$EXITSTATUSFILE"
        fi
    fi

    if [ -f "$cdai_optionsFile" -a -d "$cdai_installDir/work"    ]; then
        cp -f $cdai_optionsFile $cdai_installDir/work
        if [ "$?" != "0" ]; then
            rc=$?
            log 4 CDAI024E "$cdai_optionsFile"
        fi
  fi

  logDebug 0 "copyOutputFiles() exited. rc=$rc"
}

##############################################################################
# Uninstall CDU.
doUninstall () #
{
    logDebug 0 "doUninstall() entered."

    rc=0

    chkIfInstalled
    if [ "$?" != "0" ]; then
        log 8 CDAI030E
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 30
    fi

    shutdownCd

    if [ "$cdai_trace" = "y" ]; then
        WTMP=$LOGFILE
    else
        WTMP=/dev/null
    fi

    if [ -d $cdai_installDir ]; then
        rm -rf $cdai_installDir >> $WTMP 2>&1
        rc=$?
        if [ "$rc" != "0" ]; then
            logDebug 0 "Retrying rm of $cdai_installDir during uninstall."
            sleep 20
            rm -rf $cdai_installDir >> $WTMP 2>&1
            rc=$?
            if [ "$rc" != "0" ]; then
                log 8 CDAI026E
                createExitStatusFile
                log "8" "CDAI001E"
                exitScript 26
            fi
        fi
    else
        log 4 CDAI021E
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 21
    fi

    logDebug 0 "doUninstall() exited."
    return $rc
}

##############################################################################
# Copy config files.
copyConfigFiles () #
{
    logDebug 0 "copyConfigFiles() entered."

    ccrc=1

    if [ -f "$cdai_deployDir/initparm.cfg" ]; then
        cp -f $cdai_deployDir/initparm.cfg $cdai_installDir/ndm/cfg/$cdai_localNodeName
        if [ $? != 0 ]; then
            log 8 CDAI049E "initparm.cfg"
            createExitStatusFile
            log "8" "CDAI001E"
            exitScript 49
        fi
        ccrc=0
    fi

    if [ -f "$cdai_deployDir/netmap.cfg" ]; then
        cp -f $cdai_deployDir/netmap.cfg $cdai_installDir/ndm/cfg/$cdai_localNodeName
        if [ $? != 0 ]; then
            log 8 CDAI049E "netmap.cfg"
            createExitStatusFile
            log "8" "CDAI001E"
            exitScript 49
        fi
        ccrc=0
    fi

    if [ -f "$cdai_deployDir/userfile.cfg" ]; then
        cp -f $cdai_deployDir/userfile.cfg $cdai_installDir/ndm/cfg/$cdai_localNodeName
        if [ $? != 0 ]; then
            log 8 CDAI049E "userfile.cfg"
            createExitStatusFile
            log "8" "CDAI001E"
            exitScript 49
        fi
        ccrc=0
    fi

    logDebug 0 "copyConfigFiles() exited."
    return $ccrc
}

##############################################################################
# Copy config files.
haveConfigFiles () #
{
    logDebug 0 "haveConfigFiles() entered."

    ccrc=1

    if [ -f "$cdai_deployDir/initparm.cfg" ]; then
        ccrc=0
    fi

    if [ -f "$cdai_deployDir/netmap.cfg" ]; then
        ccrc=0
    fi

    if [ -f "$cdai_deployDir/userfile.cfg" ]; then
        ccrc=0
    fi

    logDebug 0 "haveConfigFiles() exited. ccrc=$ccrc"
  return $ccrc
}

##############################################################################
# Build translation tables if present.
bldXlateTables () #
{
    logDebug 0 "bldXlateTables() entered."

    ls $cdai_deployDir/*sxlt > /dev/null 2>&1
    if [ "$?" != "0" ]; then
        logDebug 0 "bldXlateTables() exited. No .sxlt files."
        return 1
    fi

    log 0 CDAI029I

    su $cdai_adminUserid -c "cp -f $cdai_deployDir/*.sxlt $cdai_installDir/ndm/src" > /dev/null 2>&1

    for sxlt in `ls $cdai_deployDir/*sxlt`; do
        if [ "$cdai_trace" = "y" ]; then
            sxlt=`basename $sxlt`
            xlt=`echo $sxlt | sed -e's/\.sxlt/\.xlt/'`
            logDebug 0 "bldXlateTables(): sxlt,xlt: $sxlt,$xlt"
            su $cdai_adminUserid -c "$cdai_installDir/ndm/bin/ndmxlt -s$cdai_installDir/ndm/src/$sxlt -o$cdai_installDir/ndm/xlate/$xlt" >> $LOGFILE 2>&1
        else
            $cdai_installDir/ndm/bin/ndmxlt -s$cdai_installDir/ndm/src/$sxlt -o$cdai_installDir/ndm/xlate/$xlt > /dev/null 2>&1
        fi
        if [ $? != 0 ]; then
            log 8 CDAI023E $sxlt
            createExitStatusFile
            log "8" "CDAI001E"
            exitScript 23
        fi
    done

    log 0 CDAI030I

    logDebug 0 "bldXlateTables() exited."
}

##############################################################################
# Aspera FASP configuration
configFASP () #
{
    logDebug 0 "configFASP() entered."

    if [ -f "$cdai_asperaLicenseFile" ]; then
        # Copy as adminUserid so file ownership is not set to root
        su $cdai_adminUserid -c "cp -f $cdai_asperaLicenseFile $cdai_installDir/ndm/cfg/$cdai_localNodeName/aspera-license" >> $LOGFILE 2>&1
        if [ $? != 0 ]; then
            log 8 CDAI049E "aspera-license file"
            createExitStatusFile
            log "8" "CDAI001E"
            exitScript 49
        else
            chmod ug+r $cdai_installDir/ndm/cfg/$cdai_localNodeName/aspera-license
        fi
    fi

    ccrc=0

    logDebug 0 "configFASP() exited."
}

##############################################################################
# Single place to exit from script.
exitScript () #
{
    logDebug 0 "exitScript() entered."

    unset cdai_keystorePassword PASSPHRASE cdai_localCertPassphrase

    finalRc=$1
    if [ "$finalRc" = "" ]; then
        finalRc=256
    fi

    if [ "$cdai_installCmd" != "$UNINSTALL" ]; then
        copyOutputFiles $finalRc
    fi

    cleanup

    if [ "$finalRc" = "0" ]; then
        log $finalRc CDAI033I
    else
        log $finalRc CDAI025E
    fi

    logDebug 0 "exitScript() exited. finalRc=$finalRc"
    exit $finalRc
}

##############################################################################
cleanup () #
{
    logDebug 0 "cleanup() entered."

    if [ "$doingTEM" = "y" ]; then
        rm -rf $cdai_installDir/deployDir > /dev/null 2>&1
    else
        cd $cdai_deployDir
        rm -rf basersps.txt cdcust tmp upgradersps.txt upgradeRsprsps.txt doupgraderootrsps.txt > /dev/null 2>&1
    fi

    logDebug 0 "cleanup() exited."
}


##################
# Mainline Logic #
##################
init $@

if [ "$cdai_installCmd" = $INSTALL ]; then
    chkIfInstalled
    if [ "$?" = "0" ]; then
        log 8 CDAI028E
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 28
    fi
    log 0 CDAI018I
    baseInstallConfigure
    createIdInfoFile
    configFASP
    doRootProcessing
    haveConfigFiles
    if [ $? = 0 ]; then
        copyConfigFiles
    fi
    log 0 CDAI021I
    configSp
    verifyInstallation
    bldXlateTables
    log "0" "CDAI001I" $cdai_installCmd
elif [ "$cdai_installCmd" = $UPGRADE ]; then
    chkIfInstalled
    if [ "$?" != "0" ]; then
        log 8 CDAI029E
        createExitStatusFile
        log "8" "CDAI001E"
        exitScript 29
    fi
    log 0 CDAI019I
    upgradeInstall
    createIdInfoFile
    configFASP
    doUpgradeRootProcessing
    if [ "$cdai_spConfig" != "" ]
    then
	configSp
    fi
    if [ "$cdai_verifyUpgrade" = "n" ]
    then
	startupCd
    else
	verifyInstallation
    fi
    log "0" "CDAI001I" $cdai_installCmd
else
    log 0 CDAI020I
    doUninstall
    if [ "$?" = "0" ]; then
        log "0" "CDAI017I"
        log "0" "CDAI001I" $cdai_installCmd
    fi
fi

createExitStatusFile

exitScript 0

